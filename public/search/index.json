[{"content":"总览 软件分类 描述 娱乐类 游戏、音乐等软件、工具 工具类 我用到的一些小工具 娱乐类 MusicFree-音乐软件（支持多端） MusicFree一款免费、开源、可以上传音乐源（插件化）的音乐播放器，支持Mac、Linux、Windows、Android四端（截止2025.08.07）。\n也可以从MusicFreeDesktop Github的Releases下载。\n下载 app 之后，只需要在侧边栏设置-插件设置中安装插件即可。你可以直接点击从网络安装插件，然后输入:\n1 https://gitee.com/maotoumao/MusicFreePlugins/raw/master/plugins.json 点击确认即可安装。\n然后你就可以进行搜索音乐啦~\n个人建议，选择bilibili或者YouTube音乐源更好，这两个的音乐也更全。\nMoonTV-视频网站（可自行私密部署） MoonTV是一个开箱即用的、跨平台的影视聚合播放器。\n内置数十个免费资源站点，一次搜索立刻返回全源结果（实测部分站点的速度很快）。\n电影、电视剧、综艺、纪录片应有尽有！\n可以部署到Vercel，实现私人影院！\nFork本仓库到你的 GitHub 账户。 登陆 Vercel，点击 Add New → Project，选择 Fork 后的仓库。 设置 PASSWORD 环境变量（访问密码）。 保持默认设置完成首次部署。 如需自定义 config.json，请直接修改 Fork 后仓库中该文件。 每次 Push 到 main 分支将自动触发重新构建。 部署完成后即可通过分配的域名访问，也可以绑定自定义域名。\n个人建议绑定一个自定义域名，这样国内也能顺利打开网站（毕竟Vercel的域名被国内给墙了）\n工具类 Watt Toolkit (原名steam++) Watt Toolkit是一个开源跨平台的多功能 Steam 工具箱。\n之所以将其划分到工具类, 是因为我觉得这个除了加速steam商店, 还能加速其他的网站，包括但不限于Discord语音聊天 | 3.0.0-rc.13(2024-12-01)版本疑似已去除、Twitch直播、Origin游戏下载 - 烂橘子、Uplay商店 - 育碧、一些公共CDN、Google翻译、Spotify、一些国外验证码平台、Github、Roblox、Mod.io、Nexus Mods - N网MOD、一些网盘服务、其他网站\n魔戒（薇屁恩）- 按流量计费、无限时间 魔戒 VPN注册是我见过的唯一一个按流量计费、不限时间的节点订阅网站。\n通过我这个链接https://mojie.cyou/#/register?code=PuxpBY7b注册账号，首次购买套餐有20%折扣！\n就我个人而言，130GB流断断续续用了3、4年还有15%左右！\n套餐详情\rSubsTracker-订阅管理与提醒系统 SubsTracker是一款基于Cloudflare Workers的轻量级订阅管理系统。\n支持多渠道通知：Telegram Bot 通知、NotifyX推送服务、企业微信应用通知、企业微信机器人、基于 Resend 的邮件服务以及自定义请求格式和模板。\n部署到CloudFlare Workers 应该不必多教，项目的README中也有教程。还有不会的可以在评论区留言。\n为什么推荐这个项目？因为我用了一个免费的域名，需要在到期前180天内续费一次，所以用这个设置一下提醒，怕忘记了。\n这个项目的用处当然不止于此，或许有其他用法尚未挖掘。\n免费域名(xxx.dpdns.org) Digitalplat点击Projects,然后选择Free domain for everyone，需要注册一个账号。\n免费域名\r注册好账号后点这个，注册域名：\n进入注册域名页面\r然后输入你想要的域名前缀，检查能不能用，如果能用，则直接就弄好了，如果不行，需要更改前缀名。\n最后点击Check即可\r创建好后需要搞上DNS服务器，推荐CloudFlare，只需要在上面添加该域名，然后就会有提示填写两个DNS服务器。\n填写后需要保存，成功截图如下：\n免费域名绑定CloudFlare的DNS服务器\r（不会域名绑定到Cloudflare的可以评论区留言）\n应该可以有多个二级域名,例如我的域名是caihongtu.dpdns.org,那么可以有二级域名: a.caihongtu.dpdns.org、b.caihongtu.dpdns.org等等.\n后续的续费操作如下图所示：\n续费免费域名\r附录 以下根据watt toolkit 的3.0.0-rc.13(2024-12-01)版本介绍。\n公共CDN有fonts.gstatic.com、Gravatar头像、themes.googleusercontent.com、ajax.googleapis.com、fonts.googleapis.com、BootStrap CDN\n国外验证码平台有Goole(Recaptcha)验证码、hCaptcha验证码、Arkoselabs\n网盘服务有OneDrive、MEGA、DropBox\n其他网站有Pinterest、Artstation、Imgur图床、vercel.app、appcenter.ms\n参考 VS Code 的 7 个开源替代品 | Linux中国 版权信息 本文原载于 彩虹兔の博客，遵循 CC BY-NC-SA 4.0 协议，复制请保留原文出处。\n","date":"2024-12-08T21:44:34+08:00","image":"https://picsum.photos/seed/recommended-apps11/800/600","permalink":"http://localhost:1313/2024/recommended-apps/","title":"个人推荐的一些应用、APP、网站"},{"content":"引言 本博客使用了stack主题 | hugo，原GitHub仓库为Hugo-stack-theme-mod | GitHub\n如果你的Hugo版本是高于2022年发布的，直接运行源仓库代码会报错，因为其中部分函数方法已经弃用，修改请参考：将报错原因发送给AI，根据AI提示错误来修改，这里由于我修改时没截图，暂时无法展示。\n如果使用我的博客仓库代码，请将我的文章全部删除后，再添加你自己的文章。同时需要替换所有出现的彩虹兔、caihongtu之类的词语。\n首页的欢迎横幅 2025年10月14日更新，域名已经更改为caihongtu.top\n预览： 欢迎横幅\r由于项目是部署在Cloudflare上的，所以那个永久域名大概不会过期（除非Cloudflare倒闭），但是当前域名可就不一定了，因为我想要注册的caihongtu.com目前被人注册了，所以先注册了这个caihongtu.asia，等那个com域名可以注册了，我会立马出手的。（别问为什么不去找对方买，因为没💰）\n修改代码 博客的根目录新建layouts文件夹（默认就有，没有的话手动创建），之后将./themes/hugo-theme-stack/layouts/index.html下的文件复制到刚刚创建的layouts文件夹内（如果这个文件夹下本来就有对应文件，则无须复制），之后再在index.html中添加以下内容： 点我查看代码 (点击展开收缩) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 {{ define \u0026#34;main\u0026#34; }} {{ $pages := where .Site.RegularPages \u0026#34;Type\u0026#34; \u0026#34;in\u0026#34; .Site.Params.mainSections }} {{ $notHidden := where .Site.RegularPages \u0026#34;Params.hidden\u0026#34; \u0026#34;!=\u0026#34; true }} {{ $filtered := ($pages | intersect $notHidden) }} {{ $pag := .Paginate ($filtered) }} \u0026lt;!-- 首页欢迎字幅板块 --\u0026gt; \u0026lt;div class=\u0026#34;welcome\u0026#34;\u0026gt; \u0026lt;p style=\u0026#34;font-size: 2rem; text-align: center; font-weight: bold\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;shake\u0026#34;\u0026gt;{{ T \u0026#34;welcome.emoji\u0026#34; }}\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;jump-text1\u0026#34;\u0026gt; {{ T \u0026#34;welcome.msg1\u0026#34; }} \u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;jump-text2\u0026#34;\u0026gt; {{ T \u0026#34;welcome.msg2\u0026#34; }} \u0026lt;/span\u0026gt; \u0026lt;span id=\u0026#34;site-title-static\u0026#34; style=\u0026#34;color: #e99312\u0026#34;\u0026gt;{{ .Site.Title }}\u0026lt;/span\u0026gt; \u0026lt;span id=\u0026#34;site-title\u0026#34; style=\u0026#34;display: none; color: #e99312\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;p style=\u0026#34;font-size: 1.5rem; text-align: center; font-weight: bold\u0026#34;\u0026gt; \u0026lt;span \u0026gt;{{ T \u0026#34;welcome.currentText\u0026#34; }}: \u0026lt;a href=\u0026#34;{{ .Site.BaseURL }}\u0026#34; \u0026gt;{{ .Site.BaseURL | strings.TrimPrefix \u0026#34;http://\u0026#34; | strings.TrimPrefix \u0026#34;https://\u0026#34; | strings.TrimSuffix \u0026#34;/\u0026#34; }}\u0026lt;/a \u0026gt;\u0026lt;/span \u0026gt;\u0026amp;emsp;\u0026amp;emsp; \u0026lt;span \u0026gt;{{ T \u0026#34;welcome.permanentText\u0026#34; }}: \u0026lt;a href=\u0026#34;https://cai-hong-tu-blog.pages.dev\u0026#34; \u0026gt;cai-hong-tu-blog.pages.dev\u0026lt;/a \u0026gt;\u0026lt;/span \u0026gt; \u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script type=\u0026#34;module\u0026#34;\u0026gt; // 动态生成字符和样式 document.addEventListener(\u0026#34;DOMContentLoaded\u0026#34;, () =\u0026gt; { const title = \u0026#34;{{ .Site.Title }}\u0026#34;; // 获取 Hugo 变量 const titleContainer = document.getElementById(\u0026#34;site-title\u0026#34;); const staticTitle = document.getElementById(\u0026#34;site-title-static\u0026#34;); // 动态添加字符到 #site-title title.split(\u0026#34;\u0026#34;).forEach((char, index) =\u0026gt; { const span = document.createElement(\u0026#34;span\u0026#34;); span.textContent = char; span.className = `jump-text jump-text${index}`; titleContainer.appendChild(span); }); // 动态生成 CSS 动画规则 const styleSheet = document.styleSheets[0]; title.split(\u0026#34;\u0026#34;).forEach((_, index) =\u0026gt; { const delay = (index * 0.1).toFixed(1); // 每个字符延迟 0.1s const rule = ` .jump-text${index} { display: inline-block; animation: jump 0.5s 1; animation-delay: ${delay}s; } `; styleSheet.insertRule(rule, styleSheet.cssRules.length); staticTitle.style.display = \u0026#34;none\u0026#34;; titleContainer.style.display = \u0026#34;inline\u0026#34;; }); }); \u0026lt;/script\u0026gt; \u0026lt;!-- ------首页欢迎字幅板块------ --\u0026gt; \u0026lt;section class=\u0026#34;article-list\u0026#34;\u0026gt; {{ range $index, $element := $pag.Pages }} {{ partial \u0026#34;article-list/default\u0026#34; . }} {{ end }} \u0026lt;/section\u0026gt; \u0026lt;script type=\u0026#34;module\u0026#34;\u0026gt; import { commentCount } from \u0026#34;https://unpkg.com/@waline/client@v3/dist/comment.js\u0026#34;; commentCount({ serverURL: \u0026#34;{{.Site.Params.comments.waline.serverURL}}\u0026#34;, }); \u0026lt;/script\u0026gt; {{- partial \u0026#34;pagination.html\u0026#34; . -}} {{- partial \u0026#34;footer/footer\u0026#34; . -}} {{ end }} {{ define \u0026#34;right-sidebar\u0026#34; }} {{ partial \u0026#34;sidebar/right.html\u0026#34; . }} {{ end }} 上面是我的index.html所有的代码，你只需要关注“首页欢迎字幅板块”即可。 下面是横幅的css样式，目录在./assets/scss/custom.scss中\n点我查看代码 (点击展开收缩) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 //--------------------------------------------------------- //首页欢迎板块样式 .welcome { color: var(--card-text-color-main); background: var(--card-background); box-shadow: var(--shadow-l2); border-radius: 30px; display: inline-block; } // 👋emoji实现摆动效果 .shake { display: inline-block; animation: shake 1s; animation-duration: 1s; animation-timing-function: ease; animation-delay: 0s; animation-iteration-count: 1; animation-direction: normal; animation-fill-mode: none; animation-play-state: running; animation-name: shake; animation-timeline: auto; animation-range-start: normal; animation-range-end: normal; animation-delay: 2s; @keyframes shake { 0% { transform: rotate(0); } 25% { transform: rotate(45deg) scale(1.2); } 50% { transform: rotate(0) scale(1.2); } 75% { transform: rotate(45deg) scale(1.2); } 100% { transform: rotate(0); } } } // 实现字符跳动动画 .jump-text1 { display: inline-block; animation: jump 0.5s 1; } .jump-text2 { display: inline-block; animation: jump 0.5s 1; animation-delay: 0.1s; } @keyframes jump { 0% { transform: translateY(0); } 50% { transform: translateY(-20px); } 100% { transform: translateY(0); } } 文章置顶功能（支持多个置顶） 预览： 置顶文章\r有时候不得不承认，早期写的文章还是会经常拿出来看的，所以便打算自己写一个置顶功能。\n一开始预想的是在文章的头部Front Matter写上一个自定义的top，为true时则置顶，反之则不置顶。\n修改代码过程中发现，可以在每篇文章处写上weight。\n两者各有利弊，下面分享一下两种置顶的方法。在最后，我将两者稍微整合了一下。\n温馨提示：如果你赶时间，请直接看最终版！！！\n使用自定义top属性 在文章中添加这个top： 添加了top属性\r首先需要搞明白的是，我们想达成的效果：在首页，文章列表需要将当前页的置顶文章放到最前面，并且有角标标注。\n所以我们可以将其拆分为两件事去做。\n1.置顶文章渲染 已知layouts/index.html为首页的html模板，所以我们只需要修改这里面的代码即可。\n如果你熟悉go中html的模板，那么你一定能看得懂下面代码。\n不懂也没关系，简单来说，现在你已经有了置顶文章topPages和正常文章normalPages！\n点我查看代码 (点击展开收缩) 1 2 3 4 5 6 7 8 9 10 11 12 13 \u0026lt;!-- 修改前 --\u0026gt; {{ define \u0026#34;main\u0026#34; }} {{ $pages := where .Site.RegularPages \u0026#34;Type\u0026#34; \u0026#34;in\u0026#34; .Site.Params.mainSections }} {{ $notHidden := where .Site.RegularPages \u0026#34;Params.hidden\u0026#34; \u0026#34;!=\u0026#34; true }} {{ $filtered := ($pages | intersect $notHidden) }} {{ $pag := .Paginate ($filtered) }} \u0026lt;!-- 修改后 --\u0026gt; {{ define \u0026#34;main\u0026#34; }} {{ $pages := where .Site.RegularPages \u0026#34;Type\u0026#34; \u0026#34;in\u0026#34; .Site.Params.mainSections }} {{ $topPages := where $pages \u0026#34;Params.top\u0026#34; true }} {{ $normalPages := where $pages \u0026#34;Params.top\u0026#34; false }} {{ $pag := .Paginate ($normalPages) }} 小声逼逼，这个pag经过.Paginate分页之后，就变回了正常的分页，也就是说，pag中包含着置顶文章！而这个在我们后面是明显不需要的！\n并且，我也尝试过将topPages和normalPages合并后，再进行.Paginate分页，但最终结果与其一致！\n反正是一顿操作过后，下面的渲染写成了这样：\n点我查看代码 (点击展开收缩) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 \u0026lt;!-- 这个是原来的 --\u0026gt; \u0026lt;section class=\u0026#34;article-list\u0026#34;\u0026gt; {{ range $index, $element := $pag.Pages }} {{ partial \u0026#34;article-list/default\u0026#34; . }} {{ end }} \u0026lt;/section\u0026gt; \u0026lt;!-- 分割线 --\u0026gt; \u0026lt;!-- 这个是我改了之后的 --\u0026gt; \u0026lt;section class=\u0026#34;article-list\u0026#34;\u0026gt; {{ range $index, $element := $topPages }} {{ partial \u0026#34;article-list/default\u0026#34; . }} {{ end }} \u0026lt;/section\u0026gt; \u0026lt;section class=\u0026#34;article-list\u0026#34;\u0026gt; {{ range $index, $element := $pag.Pages }} {{ if not .Params.top }} {{ partial \u0026#34;article-list/default\u0026#34; . }} {{ end }} {{ end }} \u0026lt;/section\u0026gt; 2.置顶角标 Q: 如何寻找主页列表是哪个html渲染的？\nA: 我们可以在index.html中看到这段代码：{{ partial \u0026quot;article-list/default\u0026quot; . }}，这个就说明需要寻找article-list/default.html\n所以，layouts\\partials\\article-list\\default.html为主页的渲染列表，然后打开会发现，它其实是渲染了文章的header部分(layouts\\partials\\article\\components\\header.html)。\n需要注意，在header.html中，如果使用.IsHome来判断是否处于首页，其结果永远为false，因为这个.没有代表着根页面，它是文章页面的一部分！ 那么无法判断是否在首页，这个咋办？传递一个参数？不行！这样需要修改的页面就多了，其他用到header的都要加上这个参数。\n于是我苦思冥想，终于找到了一种办法，那就是COPY一份header.html，重命名为header-top.html\n然后让article-list/default.html来渲染header-top.html就行了！\n最终header-top.html代码如下：\n点我查看代码 (点击展开收缩) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 \u0026lt;header class=\u0026#34;article-header\u0026#34;\u0026gt; {{- $image := partialCached \u0026#34;helper/image\u0026#34; (dict \u0026#34;Context\u0026#34; . \u0026#34;Type\u0026#34; \u0026#34;article\u0026#34;) .RelPermalink \u0026#34;article\u0026#34; -}} {{ if $image.exists }} \u0026lt;!-- 新增代码如下 --\u0026gt; \u0026lt;div class=\u0026#34;article-image\u0026#34;\u0026gt; {{ if .Params.top }} \u0026lt;span class=\u0026#34;top-badge\u0026#34;\u0026gt;置顶\u0026lt;/span\u0026gt; {{ end }} \u0026lt;/div\u0026gt; \u0026lt;!-- 新增代码如上 --\u0026gt; \u0026lt;!-- 以下代码未动 --\u0026gt; \u0026lt;a\u0026gt;...\u0026lt;/a\u0026gt; \u0026lt;!-- 以上代码未动 --\u0026gt; {{ end }} {{ partialCached \u0026#34;article/components/details\u0026#34; . .RelPermalink }} \u0026lt;/header\u0026gt; CSS代码就需要写到assets\\scss\\partials\\article.scss中，打开该文件，找到如下图所示的.article-list article .article-image,然后填入代码。\nCSS填入位置\r点我查看代码 (点击展开收缩) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 position: relative; .top-badge { position: absolute; left: 10; top: 10; background: #e43; color: #fff; padding: 6px 30px; font-size: 1.5rem; font-weight: 700; transform: rotate(-35deg)translate(-20px,0px); box-shadow: 0 2px 8px rgba(0,0,0,.15); z-index: 2; border-top-left-radius: 6px; border-bottom-right-radius: 6px; pointer-events: none; user-select: none; } 到此，大功告成！\n缺点 但是这样写有个坏处，就是置顶的没有参与分页。\n打个比方说，现在我们在config中设置的分页数量为5，一共10篇文章，其中后3篇全需要置顶。\n那么第一页是正常显示5篇文章，第二页则是会显示3+5=8篇文章！\n使用weight属性 如果希望置顶的文章也参与分页，那么可以看一看这种方法。\nHugo中默认就有weight属性，并且分页时会自动计算，所以无需其他多余操作。\n只需要在文章的Front Matter中添加上weight: 非零整数即可！\nimage.png\r请注意，若不写weight，则默认视为0，并且数字越大，文章越靠后。\n所以，数字越小（负整数），排名越靠前，也就是等效于“置顶”效果了。\n而此时的header-top.html，则需要改为如下代码：\n1 2 3 {{ if lt .Params.weight -10 }} \u0026lt;span class=\u0026#34;top-badge\u0026#34;\u0026gt;置顶\u0026lt;/span\u0026gt; {{ end }} 上面代码是判断weight小于-10时，才会有置顶角标。\n优缺点 使用weight的优点就是置顶文章也参与到分页中了，进入第二页，则第一页的置顶文章消失\n但缺点也显而易见，需要记住自己填写的这个判断范围，如果超出了这个范围，可能角标不会生效。\n那么就会有人问了，煮波煮波，有没有既让置顶文章加入分页，又不用记这个范围的方法呢？我的回答是，有的，兄弟，有的。\ntop + weight 组合（最终版） 利用weight来对文章列表渲染进行排序，利用top来控制角标的显隐，应该是最优解了。\n既有top，又有weight\rlayouts\\index.html保持原代码不变，复制layouts\\partials\\article\\components\\header.html一份，修改名称为header-top.html，路径如下:layouts\\partials\\article\\components\\header-top.html\nheader-top.html代码如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 \u0026lt;header class=\u0026#34;article-header\u0026#34;\u0026gt; {{- $image := partialCached \u0026#34;helper/image\u0026#34; (dict \u0026#34;Context\u0026#34; . \u0026#34;Type\u0026#34; \u0026#34;article\u0026#34;) .RelPermalink \u0026#34;article\u0026#34; -}} {{ if $image.exists }} \u0026lt;div class=\u0026#34;article-image\u0026#34;\u0026gt; {{ if .Params.top }} \u0026lt;span class=\u0026#34;top-badge\u0026#34;\u0026gt;置顶\u0026lt;/span\u0026gt; {{ end }} \u0026lt;a href=\u0026#34;{{ .RelPermalink }}\u0026#34;\u0026gt; {{ if $image.resource }} {{- $Permalink := $image.resource.RelPermalink -}} {{- $Width := $image.resource.Width -}} {{- $Height := $image.resource.Height -}} {{- $Srcset := \u0026#34;\u0026#34; -}} {{- if (default true .Page.Site.Params.imageProcessing.cover.enabled) -}} {{- $thumbnail := $image.resource.Resize \u0026#34;800x\u0026#34; -}} {{- $thumbnailRetina := $image.resource.Resize \u0026#34;1600x\u0026#34; -}} {{- $Srcset = printf \u0026#34;%s 800w, %s 1600w\u0026#34; $thumbnail.RelPermalink $thumbnailRetina.RelPermalink -}} {{- $Permalink = $thumbnail.RelPermalink -}} {{- $Width = $thumbnail.Width -}} {{- $Height = $thumbnail.Height -}} {{- end -}} \u0026lt;img src=\u0026#34;{{ $Permalink }}\u0026#34; {{ with $Srcset }}srcset=\u0026#34;{{ . }}\u0026#34;{{ end }} width=\u0026#34;{{ $Width }}\u0026#34; height=\u0026#34;{{ $Height }}\u0026#34; loading=\u0026#34;lazy\u0026#34; alt=\u0026#34;Featured image of post {{ .Title }}\u0026#34; /\u0026gt; {{ else }} \u0026lt;img src=\u0026#34;{{ $image.permalink }}\u0026#34; loading=\u0026#34;lazy\u0026#34; alt=\u0026#34;Featured image of post {{ .Title }}\u0026#34; /\u0026gt; {{ end }} \u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; {{ end }} {{ partialCached \u0026#34;article/components/details\u0026#34; . .RelPermalink }} \u0026lt;/header\u0026gt; 修改layouts\\partials\\article-list\\default.html文件，用以渲染header-top.html：\n1 2 3 4 {{ $image := partialCached \u0026#34;helper/image\u0026#34; (dict \u0026#34;Context\u0026#34; . \u0026#34;Type\u0026#34; \u0026#34;articleList\u0026#34;) .RelPermalink \u0026#34;articleList\u0026#34; }} \u0026lt;article class=\u0026#34;{{ if $image.exists }}has-image{{ end }}\u0026#34;\u0026gt; {{ partial \u0026#34;article/components/header-top\u0026#34; . }} \u0026lt;/article\u0026gt; 到这里，置顶效果就结束了，如果后续有其他方法，我会更新到下面。\n附录 参考 🎉首页添加欢迎横幅 - linsnow博客\nWeight - Hugo Docs\nif - Hugo Docs\n版权信息 本文原载于 彩虹兔の博客，遵循 CC BY-NC-SA 4.0 协议，复制请保留原文出处。\n","date":"2024-11-21T12:08:45+08:00","image":"https://picsum.photos/seed/hugo-theme11/800/600","permalink":"http://localhost:1313/2024/hugo-theme/","title":"关于博客的样式改造"},{"content":"引言 Cloudflare人称\u0026quot;赛博活佛\u0026quot;, 其中的workers更是能够作为代码初学者的一个练手工具, 其免费功能便足以支撑一个微小型的程序运行.\n本篇文章旨在给大家分享: 使用Taro(React框架)和Cloudflare workers 来完成一个微信小程序.\n预计文章会很长, 持续更新中\u0026hellip;\n一. 前提条件 这里先贴一下各个官网链接, 后续看情况给出详细步骤.\n安装node 这个是必须的, 当然, 推荐也安装上nvm, 这样切换版本更方便.\nnvm(推荐) node的版本管理工具, 推荐安装.\n安装Taro 前端框架, 你也可以选择使用Vue, 或者直接在微信开发者工具中编写代码.\n安装vscode(推荐) 代码编辑器, 主要用来写后端代码.\n安装微信开发者工具 用来展示程序界面、发布微信小程序的必需工具.\nCloudflare注册并开启存储和数据库功能 一切的根源, 因为有它, 笔者才打算写此篇文章.\n注册一个域名(推荐spaceship)并在Cloudflare解析 推荐6-9位数纯数字的xyz域名,每年不到10块钱的价格,非常香的域名了.(毕竟咱们只用在后端, 页面展示选择的是微信小程序)\n任意AI工具 编写代码的时候将会用到, 你可以根据自身情况选择chatgpt、豆包之类的.\n二. 有话要问 为什么选择Taro? 因为我个人觉得React比Vue更好. 当然, 你也可以去选择使用Vue之类的代码, 甚至你还可以直接使用微信开发者工具来直接写!\n为什么开发微信小程序? 有比较重要的一点, 就是免费版的Cloudflare D1数据库每天支持的读次数仅仅才500万, UV稍微高一点就会超出限制, 但是对于一个微小型程序来说足够日常使用了.\n当然, 由于咱们的域名是纯数字的, 并且不方便将域名公开给大众, 所以就选择了微信小程序, 如果你有网站需求, taro框架也可以直接编译成网站, 只需要自己打包一下就行了.\n更多问题整理中\u0026hellip; 三. 需求分析 项目背景 随着情侣、伴侣之间的日常开销增多，许多人希望能更方便地记录、共享和统计两人共同的花费情况。传统的记账应用多为个人使用，不支持双人协作或互动。本项目旨在打造一款专为情侣设计的双人共享记账小程序，帮助双方轻松记录、查看和管理共同开销，提升沟通与财务透明度。\n目标用户 恋爱中或已结婚的情侣；\n需要共同管理支出的室友、朋友；\n想要建立“共享记账习惯”的小群体（2人为主）。\n核心需求 用户账户与绑定\n支持微信登录； 用户可以通过邀请码/二维码绑定另一半； 绑定后自动形成一个“共同账本”； 支持解绑、更换搭档等操作。 记账功能\n支持快速添加账单（金额、分类、日期、备注）； 支持选择「谁支付」「谁消费」； 可设为「共同支出」或「个人支出」； 支持图片上传（如小票）。 数据统计与可视化\n查看当月支出总额； 自动计算双方“结余”与“平摊”金额； 支持分类统计（餐饮、出行、礼物、房租等）； 图表展示（饼图、折线图）。 情侣特色功能\n每月结算提醒； 「甜蜜语」模式（添加账单时可附加一句小情话或表情）； 纪念日账单或特殊标签（如“恋爱100天晚餐”）； 支持自定义封面与情侣头像。 安全与隐私\n数据仅双方可见； 重要操作（解绑、删除账本）需双方确认； 云端存储数据，防止误删丢失。 非功能性需求 简洁美观：界面风格清新、情侣主题；\n操作流畅：记账操作≤3步；\n跨设备同步：双方实时同步账单；\n隐私保护：不公开、不社交化。\n后续规划（可选） 添加「情侣预算」功能；\n月度结算报告自动生成；\n多人模式扩展（家庭账本）；\nAI智能账单分析与建议。\n项目目标 打造一款：\n轻量级、操作简单；\n聚焦情侣场景；\n兼具情感互动与实用功能的微信小程序。\n四.产品分析 用户流程图（简易） 1 首次使用 → 微信授权登录 → 创建/加入情侣账本 → 记账/查看记录 → 统计分析 → 月结算提醒 功能模块 用户模块 功能 描述 备注 微信登录 通过 openid 获取用户身份 必需 创建账本 单方创建后生成邀请码/二维码 账本ID自动生成 加入账本 输入邀请码或扫码加入 限制一对一 解绑功能 双方同意后解绑 防误操作 用户信息 用户昵称、头像 从微信获取 记账模块 功能 描述 备注 添加账单 金额、分类、支付者、消费方、备注、时间 支持快速输入 账单类型 共同支出 / 个人支出 默认共同支出 图片上传 上传消费凭证或照片 微信云存储 编辑/删除账单 支持修改与删除 权限控制：任意一方均可 情感元素 可添加“甜蜜语”或表情 可选功能 分类示例： 餐饮、交通、娱乐、购物、日用品、房租、礼物、其他（支持自定义）。\n账单模块 功能 描述 备注 列表展示 按日期分组展示账单 支持上拉加载 筛选功能 按分类、月份、支付者筛选 可选多条件 搜索功能 按备注关键字搜索 模糊匹配 账单详情 显示账单所有字段 + 图片 支持编辑 统计模块 功能 描述 备注 支出汇总 本月/自定义时间区间总支出 自动更新 平摊计算 计算双方结余与应补差额 共同支出时按 1:1 分摊 分类统计 饼图显示各类支出比例 图表组件 时间趋势 折线图展示支出变化 支持月份切换 每月结算 一键生成结算报告 可导出/分享 情侣模块 功能 描述 备注 甜蜜语记账 每笔账单可添加一句“甜言蜜语” 自带模板 纪念日提醒 自动生成纪念日账单 支持自定义日期 封面主题 不同配色（粉色系、极简系） 按情侣风格选 情侣头像 双人圆环头像显示 从绑定信息中取 系统模块 功能 描述 备注 数据加密 云端存储加密 使用微信云开发数据库 权限控制 仅绑定双方可见数据 不可分享账本 数据备份 自动每日备份 可手动导出JSON 推送提醒 账单添加、月结算提醒 微信模板消息 页面设计（初版） 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 首页（账本概览） ├── 当月总支出 ├── 双方支出比例图 ├── 快速记账按钮 └── 最近账单预览 账单页 ├── 添加账单（表单） ├── 图片上传 ├── 甜蜜语选择 统计页 ├── 分类统计饼图 ├── 趋势折线图 ├── 平摊计算结果 情侣页（个人中心） ├── 我的信息 ├── 绑定状态 ├── 纪念日设置 ├── 解绑操作 ├── 设置（主题风格） 数据结构（示例） 用户表Users 字段 类型 说明 userId string 用户ID（openid） nickname string 昵称 avatarUrl string 头像 coupleId string 绑定账本ID joinDate date 加入时间 账本表 couples 字段 类型 说明 coupleId string 账本唯一ID userA string 用户A ID userB string 用户B ID createTime date 创建时间 status string active / unbind 账单表 records 字段 类型 说明 recordId string 账单ID coupleId string 所属账本ID payer string 支付者ID consumer string 消费方ID type string 共同/个人 category string 消费类别 amount number 金额 remark string 备注 sweetNote string 甜蜜语 image string 图片URL createTime date 创建时间 技术方案（建议） 项目 建议技术栈 前端框架 Taro + React 后端 CloudFlare Workers 数据库 CloudFlare D1 SQL数据库 图表 AntV F2 文件存储 CloudFlare R2 对象存储 登录 微信 openid 授权登录 五.UI原型结构描述 Figma 结构稿文字描述版\n🌈总体风格方向 主题：温馨简约风（粉色/奶白/淡蓝为主色调）\n设计语言：极简卡片式布局 + 轻圆角（12–16px）\n图标风格：线性图标（lucide 或 iconfont）\n主要字体：苹方 / HarmonyOS Sans\n交互感受：柔和动效、轻点击反馈\n🏠首页（账本总览页） 页面名称：首页 / 我的账本\n路径：/pages/home/index\n主要结构\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 [顶部栏] - 左：情侣头像圆环（两人头像并列） - 中：账本名称（例如：“我们的账本❤️”） - 右：设置图标（⚙️） [数据概览卡片] - 当月总支出（￥xxxx.xx） - A 支出 / B 支出 / 平摊差额 - 小饼图（展示比例） [快捷操作区] - + 新建账单（主按钮，粉色） - 本月趋势图（折线图卡片） - 最近3条账单列表（卡片式展示） - 图标（类别）+ 金额 + 备注 + 日期 - 点击进入账单详情 动效建议\n新建账单按钮采用悬浮+阴影；\n列表滑动时轻微弹性。\n💰记账页（添加账单） 页面名称：添加账单\n路径： /pages/add/index\n主要结构\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 [顶部] - 返回 ← - 标题：添加账单 [输入区（卡片样式）] - 金额输入框（大字号） - 分类选择（icon + 名称） - 谁支付（A / B 头像单选按钮） - 消费类型（共同支出 / 个人支出） - 备注输入框 - 图片上传（最多3张） - 日期选择（默认当天） [甜蜜语区] - 文本框：“今天也要开心花钱呀~” - ❤️ 表情可选 3–5 个模板（点击随机切换） [底部按钮] - 保存账单（粉色主按钮） 交互说明\n金额输入完成后自动聚焦到分类；\n上传图片采用微信原生选择；\n提交成功后显示动画：“记好了~ ❤️”。\n📋账单列表页 页面名称：账单记录\n路径： /pages/records/index\n主要结构\n1 2 3 4 5 6 7 8 9 10 11 12 [顶部筛选栏] - 时间选择（本月 ▼） - 分类筛选（全部 ▼） - 支付者筛选（全部 ▼） [账单分组列表] - 每月或每日分组标题（如 “10月15日”） - 账单卡片： [图标] [分类] [金额右对齐] 小字：备注 + 谁支付 - 点击进入账单详情页 - 长按：弹出编辑/删除选项 辅助功能\n搜索框：输入备注关键字；\n上拉加载更多账单；\n空状态：可爱插画“还没有账单哦~”。\n📈统计页 页面名称：统计分析\n路径： /pages/statistics/index\n模块结构\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 [顶部月份选择] - 左右箭头切换月份（\u0026lt; 10月 \u0026gt;） [图表区] - 饼图：分类支出比例 - 折线图：支出趋势 [明细卡片] - 总支出：￥xxxx.xx - A 支出：￥xxx.xx - B 支出：￥xxx.xx - 平摊后差额提示 [结算提醒按钮] - “生成月度结算报告” → 弹窗显示差额 + 分享图（可选） 💞情侣中心页 页面名称：情侣中心 / 我的\n路径： /pages/profile/index\n页面结构\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 [顶部] - 双人头像展示（圆形并列） - 昵称与绑定状态（“与 某某 已绑定”） [信息卡片] - 纪念日：恋爱100天 💕 - 上次结算日期：10月1日 - 当前账本ID：#ABC123 - 邀请码 / 扫码绑定（若未绑定） [功能区] - 编辑纪念日 - 更换主题（粉色 / 极简灰） - 导出数据（JSON） - 解绑（红字，需双重确认） [页脚] - “我们的小账本，让爱更有秩序 ❤️” ⚙️系统与弹窗交互 弹窗 触发场景 内容说明 绑定邀请弹窗 生成邀请码后 显示二维码 + 链接说明 解绑确认弹窗 点击解绑时 双方必须同时确认 保存成功 添加账单后 “记录成功~ ❤️” 错误提示 网络或输入异常 Toast 弹窗提醒 🎨配色建议 元素 主色 辅色 说明 主色调 #FF7DA3 #FFF1F5 甜蜜粉 文本主色 #333333 主要文字 次级文字 #999999 辅助说明 背景 #FAFAFA 通用背景 成功色 #5DD39E 保存成功动画 警示色 #FF6363 删除 / 解绑警告 🧩交互动效建议 按钮点击轻缩放 0.95 → 1.0；\n图表加载渐入；\n新建账单后出现小心形粒子动效；\n页面切换使用滑入动画；\n解绑操作加入倒计时确认。\n🪄Figma 结构层级 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 Page: 首页 ├── Header ├── OverviewCard ├── QuickActions └── RecentRecords Page: 添加账单 ├── InputForm ├── SweetNoteSection └── SubmitButton Page: 账单记录 ├── FilterBar ├── RecordList └── EmptyState Page: 统计分析 ├── ChartContainer ├── SummaryCards └── ReportButton Page: 情侣中心 ├── ProfileHeader ├── InfoCards └── SettingOptions Figma文本形式 在 Figma 中使用 「Wireframe / Builder / Autoflow」类插件导入，即可快速生成页面框架。 (点击展开收缩) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 # Figma Structure: 情侣双人记账小程序 ## Page: 首页（账本总览） Frame: Home Header - Left: [AvatarGroup] 情侣头像（双人并列） - Title: “我们的账本 ❤️” - Right: [IconButton] ⚙️ 设置 OverviewCard - Label: “本月支出总额” - Value: ￥1,234.56 - SubInfo: “你：￥600 | TA：￥634 | 平摊差：-￥34” - Chart: [PieChart] 支出比例 QuickActions - ButtonPrimary: “+ 新建账单” TrendCard - Title: “支出趋势” - Chart: [LineChart] RecentList - Title: “最近账单” - RecordItem x3 - Icon (分类) - Text: “咖啡 - ￥28.00” - SubText: “你支付 · 10月12日” FloatingButton: “+ 记账” --- ## Page: 添加账单 Frame: AddRecord Header - BackButton ← - Title: “添加账单” InputForm - AmountInput: “输入金额（大号字体）” - CategoryPicker: “选择分类 → 餐饮 / 出行 / 礼物 / 其他” - PayerSelect: “谁支付 → [头像A] [头像B]” - TypeSelect: “共同支出 / 个人支出” - RemarkInput: “备注（可选）” - ImageUpload: “添加图片（+）” - DatePicker: “选择日期（默认今日）” SweetNoteSection - Title: “甜蜜语 ❤️” - TextField: “今天也要开心花钱呀~” - IconSet: ❤️ 😘 🌸 🍰 💌 SubmitArea - ButtonPrimary: “保存账单” - SuccessAnimation: “心形粒子动画” --- ## Page: 账单记录 Frame: Records Header - Title: “账单记录” - SearchBar: “搜索备注...” FilterBar - Filter1: “月份 ▼” - Filter2: “分类 ▼” - Filter3: “支付者 ▼” RecordList - Section: “10月15日” - RecordCard: - Icon: 🍜 - Title: “晚餐” - Amount: ￥85.00 - SubText: “共同支出 · 你支付” - Section: “10月14日” - RecordCard: - Icon: 🚌 - Title: “地铁交通” - Amount: ￥6.00 - SubText: “TA 支付” EmptyState - Illustration: “暂无账单插画” - Text: “还没有记录哦~” --- ## Page: 统计分析 Frame: Statistics Header - Title: “统计分析” MonthSwitcher - LeftArrow \u0026lt; 9月 - Label: “10月” - RightArrow \u0026gt; 11月 ChartSection - PieChart: “支出分类比例” - LineChart: “支出趋势变化” SummaryCards - Card1: “总支出 ￥1234.56” - Card2: “你支出 ￥600” - Card3: “TA 支出 ￥634” - Card4: “平摊差额 -￥34” ReportButton - Button: “生成月度结算报告” --- ## Page: 情侣中心 Frame: Profile Header - AvatarGroup: 双人头像 - Title: “情侣中心” - Subtitle: “已绑定：小王 ❤️ 小李” InfoSection - Card: “纪念日：恋爱100天 💕” - Card: “上次结算：10月1日” - Card: “账本ID：#A1B2C3” FunctionList - Item: “编辑纪念日” - Item: “更换主题（粉色 / 极简灰）” - Item: “导出数据 JSON” - ItemDanger: “解绑情侣（需双方确认）” Footer - Text: “让爱与账本都更有秩序 ❤️” --- ## Common Components Component: ButtonPrimary（主按钮） Component: IconButton（图标按钮） Component: PieChart Component: LineChart Component: RecordCard Component: EmptyState Component: AvatarGroup Component: FilterBar Component: SweetNoteSection 📘导入说明：\n如果你会使用figma，那么只需要导入以上文本，即可生成页面\n如果你在国内，并且没用过figma，那么可以用AI将上述文本转成自然语言，然后通过墨刀设计、mastergo等国内设计平台的AI功能来自动生成页面.\n自然语言描述 (点击展开收缩) 这是一个情侣双人记账小程序的界面结构设计描述。整个应用包含五个主要页面和一些共用组件。\n​​首页（账本总览）​\n这是应用的主页面，顶部有情侣的双人头像和标题“我们的账本”，以及设置按钮。页面中间显示本月总支出金额，并细分了你和TA各自的支出及平摊差额，还用一个饼图展示了支出比例。页面有醒目的“新建账单”按钮，下方提供了支出趋势折线图和最近的三条账单记录，如“咖啡-￥28.00”。页面右下角还有一个悬浮的“+”记账按钮。\n​​添加账单页面​​\n这个页面用于记录新账单。顶部有返回按钮和标题。主体是一个表单，需要填写金额、选择消费分类（如餐饮、出行）、选择由谁支付、确定是共同还是个人支出，还可以添加备注、图片和日期。页面还有一个特色的“甜蜜语”区域，可以输入温馨话语并选择表情。最后有“保存账单”按钮，成功后会有心形动画效果。\n​​账单记录页面​​ 这个页面展示所有历史账单。顶部可以搜索备注，下面有按月份、分类、支付者进行筛选的选项。账单列表按日期分组显示，每条记录都包含消费图标、名称、金额和支付详情。\n​​统计分析页面​​\n这个页面用图表展示消费数据。顶部可以切换月份。页面包含展示消费分类比例的饼图、显示支出变化的趋势图，以及总结总支出、双方各自支出和平摊差额的数据卡片。还可以一键生成月度结算报告。\n​​情侣中心页面​​\n这是管理双方账户的页面。显示情侣头像、昵称和绑定状态。主要信息区展示纪念日、上次结算日期和账本ID。功能列表包括编辑纪念日、更换应用主题、导出数据，以及需要双方确认的解绑功能。\n​​共用组件​​\n设计中使用了一套统一的组件库，包括主要按钮、图标按钮、饼图、折线图、账单卡片、空状态提示、双人头像组、筛选栏和甜蜜语输入区等，以保证整个应用体验的一致性。 总的来说，这是一个功能清晰、注重情侣共同理财和情感互动体验的记账小程序设计。\n这是我生成的图：\n记账小程序原型设计\r附录 参考 Cloudflare 官网 |“赛博活佛”地址\nAntV-F2 文档 | 适配移动端的图表方案\n版权信息 本文原载于 彩虹兔の博客，遵循 CC BY-NC-SA 4.0 协议，复制请保留原文出处。\n","date":"2025-10-14T15:25:40+08:00","image":"https://picsum.photos/seed/1014-create-weapp-by-taro-and-cloudflare-workers-for-free11/800/600","permalink":"http://localhost:1313/2025/cwbtacwff1/","title":"【持续更新中...】【全流程】使用React的Taro和Cloudflare Workers免费创建部署微信小程序！"},{"content":"引言 最近迷上了打三角洲，想着听听三角洲中人机都在说什么，于是搜索一番，看到有些话挺有趣，便决定记录下来。\n语录 阿萨拉 普通小兵 你听到了吗？ 有声音，先确定位置 招子放亮点 哪儿来的动静？ 不管是谁都当成敌人 麻烦来了 附近有敌人 我去看看情况 有枪声 给我出来 谁？胆子挺肥啊 先搞定这个 收拾你，早晚的事儿！ 你们完了！ 你完犊子了！ 逮住他了 了结他 棺材板给你备好了 学着点儿 你算什么东西 他们不好搞 别乱来 小心！ 嗯，胆子不小啊你！ 赶紧办了他们！ 嗯，我要受不了了！ 嗯，我灭了你！ 嗯，给爷挠痒痒呢？ 嗯，别想跑！ 结束了，放弃吧！ 你马上就完蛋了 非找不痛快是吧！ 怕了吗，怂货！ 我要你血债血偿 没完了是吧 妈呀，手雷 躲躲躲，要炸了 啊，有手雷 跑哪儿去了，你别怂啊 小崽子往哪儿躲，看我把你揪出来 你没戏唱了 迷路了吗，快不行了吧 想来干掉我 躲得了初一，躲不了十五！ 有种别跑啊 来啊，有种打正面 让我找到你就完了 我要把你们都剁了 我看你能蹲多久 还没完呢 出来，怂包！ 呃，出来吧，我不打你！ 结束了！ 怂货，往这儿看！ 你完了！ 我在这儿，你个傻子 想跟我碰一碰 有啥遗言吗 把他们办了 你丫完了，我说的 来，咱俩练练 有入侵者，把他们都干了 要么投降，要么见阎王 我被打中了 等着求饶吧 快点滚吧 这样就扯平了 你逼我的，送你了 给你爆了 就这点能耐 喷火兵 什么动静？ 都机灵点，有人摸过来了 谁在偷偷摸摸的 麻烦找上门了 谁在开枪？ 总有几个不要命的找事 有枪声，都警惕点 有敌人 我看看你能有多耐热 我就喜欢听你惨叫 别把裤子吓湿了 给你暖暖身子 喜欢烧烤吗 我耐心有限 现在求饶也没用了 化成灰吧 着急投胎是吧，我这就送你一程 送货上门了 来都来了，就别想回去了 你走不掉了 这儿有一个不要命的 把他们点了 兄弟们，敌人在这里 我看你是活够了 我要烧了你，我要烧了你！ 你小子别后悔 啊，我的眼睛！ 你完蛋了 热死了，啊、啊 啊，烫死我啦，啊 啊，不行，好烫 狙击兵 崩了这些垃圾 发现敌人，头！ 敌人在这边 有枪声，都机灵点儿 为了阿萨拉 要他们脑袋开花 打得他们站不起来 开枪，守住咱们的地盘 一个都跑不了 机枪兵 你不会有好果子吃的 你不配跟我打 老子发火了 你已经完了 还想跑，给我消失 后悔已经来不及了 我拿你去喂狗 遇上我，算你点背 现在投降还来得及 别犯蠢了，咱俩只能活一个 你路走窄了 我要把你打碎 你活不过今天了 明年的今天就是你的忌日 这值得用你的命来拼吗 吃枪子儿吧 吓哆嗦了吧 压过去 准备开火 别想往前一步 一个不留 你拦不住我的 我要认真了 哼，狗屎运 老子还能打，老子的钢板还能扛 弱鸡才会喊疼 火箭兵 来点儿热乎的 接好了，专门为你准备的 给你烫个头 再来，还有 来点劲爆的 盾兵 来啊，再打啊，我看你打不打得穿 别费劲了，废物点心 省省吧，你没救了 喂，这边儿，愣着干嘛，过来啊 当心点 我罩着你 附录 参考 【三角洲行动】阿萨拉 小兵 精英兵 语音合集 (中配) | bilibili视频 版权信息 本文原载于 彩虹兔の博客，遵循 CC BY-NC-SA 4.0 协议，复制请保留原文出处。\n","date":"2025-08-14T12:16:08+08:00","image":"https://picsum.photos/seed/df-hm-sayings11/800/600","permalink":"http://localhost:1313/2025/df-hm-sayings/","title":"三角洲行动——人机语录"},{"content":" Taro框架官网对于引入Tailwindcss写的并不准确[1]，因为在进行init的时候会报错。\n起因 使用官网的方法安装：\n1 2 3 npm i -D tailwindcss postcss autoprefixer # 初始化 tailwind.config.js 文件 npx tailwindcss init 在进行第二步的时候，会出现报错：\n1 2 3 4 npm ERR! could not determine executable to run `npm ERR! A complete log of this run can be found in: C:\\Users\\Administrator\\AppData\\Local\\npm-cache_logs\\2025-07-16T07_09_25_220Z-debug-0.log 分析 打开项目的node_modules，找到tailwindcss，可以发现它的版本是4.1.11，而打开tailwindcss官网，可以看到左上角的版本为3.4.17\n仅限国内，国际版貌似支持了4.1版本。\n所以只需要将这个版本降下来就行。\n解决办法 依次在cmd中运行如下：\n1 2 3 4 5 npm uninstall tailwindcss npm install -D tailwindcss@3.4.17 postcss autoprefixer npx tailwindcss init 后边的跟着官网走就行了。\n附录 参考 使用 Tailwind CSS | Taro官网 版权信息 本文原载于 彩虹兔の博客，遵循 CC BY-NC-SA 4.0 协议，复制请保留原文出处。\n","date":"2025-07-16T12:06:06+08:00","image":"https://picsum.photos/seed/taro-use-tailwindcss800/600","permalink":"http://localhost:1313/2025/taro-use-tailwindcss/","title":"Taro 使用 Tailwindcss，解决init报错"},{"content":"废话不多说 首先打开steam的设置，然后点“存储空间”，之后“添加驱动器”。\n图1\r点击“选择另一个位置”，就会让你选择一个文件夹，自己选上就行。\n图2\r附录 参考 版权信息 本文原载于 彩虹兔の博客，遵循 CC BY-NC-SA 4.0 协议，复制请保留原文出处。\n","date":"2025-07-10T11:18:03+08:00","image":"https://picsum.photos/seed/steam-download-location11/800/600","permalink":"http://localhost:1313/2025/steam-download-location/","title":"新版Steam下载位置（文件夹）更改"},{"content":" 扣子空间官网 https://www.coze.cn 注意，作者只在后缀为cn的扣子空间测试过，并不清楚com后缀的扣子空间的情况\n开发前准备 首先去官网，登录账号，然后选择开发平台，点快速开始。\n扣子空间——开发平台\r然后点工作空间、项目开发，新建一个应用\n点项目开发\r使用这个模板，然后自己起一个项目名字 使用模板\r准备工作完成，下面是对项目的一些改动。\n开发翻译项目 新建好的应用，是这样的： 项目内部\r删除冗余内容 由于只用到了翻译功能，所以可以将其余三个页面全部删除，如图所示操作。 先设置Translation为主页，然后删除其他三个页面\r由于页面之间跳转用到了页面，所以不能直接删除，需要先将其他三个页面的元素删除，再进行页面删除。\nTranslation页面需要删除顶部导航栏右侧按钮的点击事件\r最终预览效果如下图： 预览图\r修改页面 默认模板是没有对汉语的支持，如果想英译汉，是没有办法的，所以这里添加一个汉语，同理，你也可以添加其他语种（只要ai可以翻译的）。\n支持汉语\r给text添加一个默认文本：\n1 {{ translation.data || \u0026#39;暂时没有需要翻译的内容\u0026#39; }} text默认文本\r然后业务逻辑这里，除了translation其他全删掉,包括工作流、数据，如下图。\n业务逻辑需要删除无用的\r这个是最终效果：\n可参考左侧的组织树\r预览页面 项目修改完成后，需要看看具体咋样，可以在这里预览一下页面：\n预览页面\r以后想使用翻译的，可以在url地址栏全选，然后拖放到桌面，这样会出现一个网页的快捷方式，下次可以直接在桌面打开翻译网站啦！\n补充一：资源点 将本文章翻译一下，实测用的资源点少于5，所以资源点方面是不用担心的：\n一天500资源点\r附录 参考 版权信息 本文原载于 彩虹兔の博客，遵循 CC BY-NC-SA 4.0 协议，复制请保留原文出处。\n","date":"2025-06-20T16:38:30+08:00","image":"https://picsum.photos/seed/use-coze.cn-translate11/800/600","permalink":"http://localhost:1313/2025/make-use-of-the-coze-to-make-an-ai-translation/","title":"利用扣子空间做一个AI翻译"},{"content":"引言 换了新电脑，百般无聊之际，突然想到了很久没更新博客了，于是便有了这篇文章。\n分析 回想一下博客，使用了hugo框架，并且源代码还在我的GitHub仓库中，所以需要使用Git克隆一下项目，然后由于是Hugo框架的博客，所以需要安装一下Hugo，图片是存放在SMMS网站中的，无需下载\n安装Git 安装git没什么好说的，安装在了D盘，地址如下：Git安装地址，一直默认下一步就行。\n配置用户名、邮箱 安装完成后，需要配置一下用户名和邮箱。\n为什么要配置用户名和邮箱？\n每次git提交的时候，都会使用这个信息，推荐使用GitHub同款用户名和邮箱。\n1 2 $ git config --global user.name \u0026#34;abc\u0026#34; $ git config --global user.email \u0026#34;abc@def.com\u0026#34; \u0026ndash;global表示这个命令作用于全局，即所有的项目都会使用这个用户名和邮箱。\n设置SSH 鼠标右键，点击Git Bash，然后输入如下命令：\n1 ssh-keygen -t rsa 可以一路回车键，也可以按照下图所示，设置了一下存放位置D:\\Programs\\Git\\.ssh\\id_rsa。(需要自己创建好文件夹D:\\Programs\\Git\\.ssh才可以)\n设置SSH，修改存放位置\r配置代理 由于进行clone的时候，可能会由于网络等原因造成操作失败或者速度较慢，所以这里设置了一下代理。\n打开C:\\Users\\你的用户名文件夹，找到.gitconfig文件，添加如下内容：\n1 2 3 4 5 6 [http] proxy = socks5://127.0.0.1:1234 [https] proxy = socks5://127.0.0.1:1234 [git] proxy = socks5://127.0.0.1:1234 绑定Github 打开Github，点击头像，点击Settings，点击SSH and GPG keys，新增一个SSH key。\nGithub SSH key\r安装Git结束 安装Hugo 这里采用了Winget的安装方法。\nWinget 安装 Winget 是微软为 Windows 提供的官方免费开源软件包管理器。要安装 Hugo 的扩展版：\n1 winget install Hugo.Hugo.Extended 要卸载 Hugo 的扩展版：\n1 winget uninstall --name \u0026#34;Hugo (Extended)\u0026#34; 注意！！ 如果您是Windows用户：\n不要使用命令提示符(cmd)\n不要使用 Windows PowerShell\n请在 PowerShell 或 Linux 终端（如WSL或Git Bash）中运行这些命令\nPowerShell 和 Windows PowerShell 是不同的应用程序。\n如果你又恰好使用了vscode，那么可以这样设置一下： VSCODE 设置 Git Bash\r安装Hugo结束 至此，所有的前置操作都已完成，现在可以随意编写博客咯~\n补充一：push到GitHub后博客自动打包 我的项目是放在了CloudFlare上，作为一个pages项目，详情可查看Pages文档 | CloudFlare,在“设置-分支控制”启用了自动部署，这样，每当我Push到GitHub上最新的代码后，其就会自动部署，博客就自动出现新的！\n更换域名 2025年10月14日更新\n原域名为caihongtu.asia，是我在腾讯云买的，首年优惠价12块钱一年，但是后续续费需要80块/年。\n但是在玩博客的时候，无意间发现了哪煮米这个域名比价网站，发现SpaceShip的top后缀域名最便宜，首年8块钱(1.05刀)，后续续费只需要27块钱左右(3.85刀)\n所以，现在本博客的域名便是caihongtu.top啦\n附录 参考 Github Desktop | Download\nInstall Hugo | Doc\nHugo在Windows下不能在cmd使用\n版权信息 本文原载于 彩虹兔の博客，遵循 CC BY-NC-SA 4.0 协议，复制请保留原文出处。\n","date":"2025-06-20T13:56:11+08:00","image":"https://picsum.photos/seed/pick-up-the-blog-again11/800/600","permalink":"http://localhost:1313/2025/again-blog/","title":"重拾博客"},{"content":"引言 由于我在安装GitHub Desktop时，它自动安装到了C盘。\n下载汉化包 对于这个我肯定是不惯着他啊，直接去C:\\Users\\%username%\\AppData下的Local和Roaming目录，将里面的Github Desktop和GithubDesktop文件夹剪切到了我自己的D:\\Development\\Github文件夹内。\n就像下面这个图这样：\nGithub目录\r移动文件夹之后，管理员打开CMD，输入：\n我忘了是Local目录还是Roaming目录的GitHub文件夹有空格了，下面代码你们看自己的目录更改。 1 2 mklink \u0026#34;C:\\Users\\%username%\\AppData\\Local\\Github Desktop\u0026#34; \u0026#34;D:\\Development\\Github\\Github Desktop\u0026#34; mklink \u0026#34;C:\\Users\\%username%\\AppData\\Local\\GithubDesktop\u0026#34; \u0026#34;D:\\Development\\Github\\GithubDesktop\u0026#34; 然后来这个Github Desktop汉化 - Github仓库,右侧点击Releases下载对应版本的汉化工具\n开始汉化 汉化失败 解压之后，点击汉化，发现汉化失败，提示找不着路径。\n解决办法 打开解压后的汉化包文件夹，进入Windows文件夹内，复制其中的main.js和renderer.js（剪切也可以）\n进入Github\\GitHubDesktop\\app-3.4.9\\resources\\app目录，直接粘贴，替换文件，汉化完成。\n如图：\n放这里\r提醒 请确保关闭GitHub Desktop 软件再进行汉化！！！ 请确保软件版本与汉化版本相同！！！ 附录 参考 GithubDesktopZhTool - Github 版权信息 本文原载于 彩虹兔の博客，遵循 CC BY-NC-SA 4.0 协议，复制请保留原文出处。\n","date":"2024-11-19T11:25:20+08:00","image":"https://picsum.photos/seed/GithubDesktop11/800/600","permalink":"http://localhost:1313/2024/github-desktop/","title":"移动Github Desktop之后，汉化失败的解决办法"},{"content":"引言 在本博客的评论系统接入邮箱提醒时，用到了outlook的smtp服务，但是在使用时却发现没有邮件提醒。\n查看日志 于是上vercel看了一下日志，如下图：\nvercel部署的waline项目——发送邮件提醒报错\r报错堆栈如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 Mail send fail: Error: Invalid login: 535 5.7.139 Authentication unsuccessful, basic authentication is disabled. [CH0PR13CA0024.namprd13.prod.outlook.com 2024-11-15T12:41:27.364Z 08DD02E8CBA00082] at SMTPConnection._formatError (/var/task/node_modules/nodemailer/lib/smtp-connection/index.js:807:19) at SMTPConnection._actionAUTHComplete (/var/task/node_modules/nodemailer/lib/smtp-connection/index.js:1586:34) at SMTPConnection.\u0026lt;anonymous\u0026gt; (/var/task/node_modules/nodemailer/lib/smtp-connection/index.js:1540:18) at SMTPConnection._processResponse (/var/task/node_modules/nodemailer/lib/smtp-connection/index.js:991:20) at SMTPConnection._onData (/var/task/node_modules/nodemailer/lib/smtp-connection/index.js:772:14) at TLSSocket.SMTPConnection._onSocketData (/var/task/node_modules/nodemailer/lib/smtp-connection/index.js:195:44) at TLSSocket.emit (node:events:519:28) at TLSSocket.emit (node:domain:488:12) at addChunk (node:internal/streams/readable:559:12) at readableAddChunkPushByteMode (node:internal/streams/readable:510:3) { code: \u0026#39;EAUTH\u0026#39;, response: \u0026#39;535 5.7.139 Authentication unsuccessful, basic authentication is disabled. [CH0PR13CA0024.namprd13.prod.outlook.com 2024-11-15T12:41:27.364Z 08DD02E8CBA00082]\u0026#39;, responseCode: 535, command: \u0026#39;AUTH LOGIN\u0026#39; } 此文章来源 在waline的discussions貌似没人提出这个问题，可能是只有我在用Outlook吧\u0026hellip;\n看第一行就行：Mail send fail: Error: Invalid login: 535 5.7.139 Authentication unsuccessful, basic authentication is disabled.，意思是说outlook的smtp服务不支持basic authentication。\n我搜了一下，发现Outlook在24年9月16日停止了个人用户对基础身份验证的支持，推荐使用OAuth2认证。详见 | Microsoft 官网\n但是我没在waline文档里发现支持OAuth2。\n自己写插件吗？\n似乎没有必要为了一个评论系统写，毕竟人的精力是有限的（我才不会说是我菜）\n解决方案 于是就有了今天的主角：sendas.email\n我这里就用作者部署好的项目，就不再重新部署了。 如果你想自己部署，可以先fork一下作者的项目，然后自己部署。 部署方法如下图：\n部署方法\r开始解决 进入sendas.email，然后滚轮滑倒最下方，点击Sign in with Microsoft\nSign in with Microsoft | sendas.email\r登录时，Microsoft会提示你是否允许第三方应用访问你的账号，点击接受即可。\n是否授权\r授权之后Microsoft账户团队就会发一个邮件提醒：\n邮件提醒\r此时回到sendas.email,网站自动重定向到了configuration页面,页面如下图所示：\n显示新的用户名+密码\r修改环境变量 下面回到vercel的部署，将之前的密码换成新的密码即可。\n对应关系\r请注意，如果你之前使用的是SMTP_SERVICE，那么现在需要删除掉这个，然后新增SMTP_HOST和SMTP_PORT.\n使用的是SMTP_SERVICE\r完成vercel的环境变量配置，如下图：\n邮箱配置\r重启项目，然后就可以正常发送邮件了。\n重启项目\r附录 参考 waline discussions | Github sendas.email | 这次的主角(this target) Gmail-to-outlook-proxy | Github Gmail Help | 谷歌邮箱 Community 更新政策 | Microsoft 官网 错误的微软凭据 | Microsoft 版权信息 本文原载于 彩虹兔の博客，遵循 CC BY-NC-SA 4.0 协议，复制请保留原文出处。\n","date":"2024-11-15T22:57:11+08:00","image":"https://picsum.photos/seed/34535s/800/600","permalink":"http://localhost:1313/2024/outlook-smtp-oauth2-error/","title":"Outlook邮箱的Smtp服务出现Oauth2认证失败错误"},{"content":"引言 每次看到有大佬的 Github 主页很炫酷，自己总是羡慕不已，那些大佬真是厉害，不仅技术强，就连 Github 个人主页都酷的一批。\n于是我便查阅资料，最终决定美化一下自己的 Github 主页 （虽然我是个小菜鸡，什么开源好项目都没写出来\u0026hellip;）\n个人主页的美化 GitHub 支持定制主页，相关文档：设置和管理 GitHub 配置文件 | Github 官方文档\n新建仓库 在自己的 Github 主页中新建一个仓库，仓库名必须为自己 GitHub 用户名，例如下图为rento666，然后添加一个README.md文件，我们只需向这个文件添加需要的信息即可。\n如下图所示，图中没有勾选Add a README file，推荐勾选上（勾选上就省去自己手动创建了），此时点击创建，即为创建成功。\nrento666/rento666 是一个 ✨ 特殊 ✨ 存储库，您可以用它来将 README.md 添加到您的 GitHub 个人资料中。确保它是公开的，并使用 README 对其进行初始化以开始使用。 创建仓库时的信息\r编辑 README 下面是编辑 README.md 文件的界面：\nREADME文件初始内容\r让我们开始吧 可以在 README 中添加的内容可以是自己的介绍、开源项目、个人信息、博客、简历等。\nMarkdown 扩展性很高、支持 HTML、Emoji 等，所以可以定制自己独一无二的主页~\n不过人的精力是有限的，所以我们可以将自己认为好的模板 Fork 到自己仓库，然后修改为自己的风格。\n分享一下优秀合集：\nawesome-github-profile-readme | Github\nawesome-github-profiles | Github\nbeautify-github-profile | Github\nawesome github profile readme chinese | Github\nawesome-github-profile-readme-templates | Github\n我的主页 因为我喜欢看双城之战，所以用到了动漫里的图片，主页截图如下(长截图，加载可能较慢)：\n我的Github主页\r修改 在我的主页中，我使用了以下模板，您可以复制到自己的README.md文件中：\n第一步，复制 README： README内容如下 (点击展开收缩) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 ### Hey \u0026lt;img src=\u0026#34;https://media.giphy.com/media/hvRJCLFzcasrR4ia7z/giphy.gif\u0026#34; width=\u0026#34;25px\u0026#34;\u0026gt;，I’m Rento ![Typing SVG](https://readme-typing-svg.demolab.com/?lines=欢迎+来到+我的+Github+主页;很荣幸+能够+帮到你) \u0026lt;table\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td valign=\u0026#34;center\u0026#34; width=\u0026#34;30%\u0026#34;\u0026gt; - 🤖 我最喜欢的动漫：双城之战 - 👨‍💻 我了解Golang、Node.js、Java、React、Vue、Uni APP、React Native、Unity(C#)等等... - ✍️ [欢迎参观我的博客](https://cai-hong-tu-blog.pages.dev/) - 💬 保持思考 - 📫 联系我: [邮箱联系](mailto:putongruwo@outlook.com) - 👏 关注我: [![](https://img.shields.io/github/followers/rento666?label=关注我\u0026amp;style=social)](https://github.com/rento666/) - 🎣 兴趣：读[阮一峰的网络日志](https://www.ruanyifeng.com/blog/)，写[自己的博客](https://cai-hong-tu-blog.pages.dev/)，刷[Youtube](https://www.youtube.com/@caihongtu) **「天天开心」** ❤️ \u0026lt;/td\u0026gt; \u0026lt;td valign=\u0026#34;center\u0026#34; width=\u0026#34;100%\u0026#34; height=\u0026#34;100%\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;https://github.com/user-attachments/assets/7e018694-352d-494a-9a22-89d7d21f52b6\u0026#34; width=\u0026#34;703\u0026#34; height=\u0026#34;300\u0026#34;\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;hr/\u0026gt; 🏆 **我的 GitHub 统计信息:** |![](https://github-readme-stats.vercel.app/api?username=rento666)|![我最常用的编程语言](https://github-readme-stats.vercel.app/api/top-langs/?username=rento666\u0026amp;layout=compact\u0026amp;hide_border=true\u0026amp;langs_count=10)| |-|-| \u0026lt;table\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td valign=\u0026#34;center\u0026#34; width=\u0026#34;50%\u0026#34;\u0026gt; #### 🐍 贡献 \u0026lt;picture\u0026gt; \u0026lt;source media=\u0026#34;(prefers-color-scheme: dark)\u0026#34; srcset=\u0026#34;https://raw.githubusercontent.com/rento666/rento666/output/github-contribution-grid-snake-dark.svg\u0026#34;\u0026gt; \u0026lt;source media=\u0026#34;(prefers-color-scheme: light)\u0026#34; srcset=\u0026#34;https://raw.githubusercontent.com/rento666/rento666/output/github-contribution-grid-snake.svg\u0026#34;\u0026gt; \u0026lt;img alt=\u0026#34;github contribution grid snake animation\u0026#34; src=\u0026#34;https://raw.githubusercontent.com/rento666/rento666/output/github-contribution-grid-snake.svg\u0026#34;\u0026gt; \u0026lt;/picture\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;td valign=\u0026#34;center\u0026#34; width=\u0026#34;50%\u0026#34;\u0026gt; 📕 \u0026amp;nbsp;[**我的最新博客**](https://cai-hong-tu-blog.pages.dev/) \u0026lt;!-- BLOG-POST-LIST:START --\u0026gt; \u0026lt;!-- BLOG-POST-LIST:END --\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/table\u0026gt; 第二步，复制好之后，按CTRL+F，自行替换姓名、用户名、兴趣爱好、博客链接等信息。\n第三步，修改好 README.md 之后呢，在仓库里点击 Actions 创建 workflow（工作流），如下图所示：\n点击Actions来创建workflow\r进去之后，点Simple workflow的Configure, 如下图所示：\n点击Configure\r添加如下代码（需要分开，别放到一个文件里）：\n贪吃蛇workflow (点击展开收缩) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 name: generate animation on: # run automatically every 2 hours schedule: - cron: \u0026#34;0 */2 * * *\u0026#34; # allows to manually run the job at any time workflow_dispatch: # run on every push on the master branch push: branches: - master jobs: generate: permissions: contents: write runs-on: ubuntu-latest timeout-minutes: 5 steps: # generates a snake game from a github user (\u0026lt;github_user_name\u0026gt;) contributions graph, output a svg animation at \u0026lt;svg_out_path\u0026gt; - name: generate github-contribution-grid-snake.svg uses: Platane/snk/svg-only@v3 with: github_user_name: ${{ github.repository_owner }} outputs: | dist/github-contribution-grid-snake.svg dist/github-contribution-grid-snake-dark.svg?palette=github-dark # push the content of \u0026lt;build_dir\u0026gt; to a branch # the content will be available at https://raw.githubusercontent.com/\u0026lt;github_user\u0026gt;/\u0026lt;repository\u0026gt;/\u0026lt;target_branch\u0026gt;/\u0026lt;file\u0026gt; , or as github page - name: push github-contribution-grid-snake.svg to the output branch uses: crazy-max/ghaction-github-pages@v3.1.0 with: target_branch: output build_dir: dist env: GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 请注意，下面那个博客 workflow，需要将feed_list更换为自己的博客 RSS 地址。 如果你也是使用的 Hugo，并且主题是 Stack，那么 RSS 地址应该为https://你的博客地址/index.xml\n获取最新博客workflow (点击展开收缩) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 name: Latest blog post workflow on: schedule: # Run workflow automatically - cron: \u0026#39;0 */2 * * *\u0026#39; # Runs every hour, on the hour workflow_dispatch: # Run workflow manually (without waiting for the cron to be called), through the GitHub Actions Workflow page directly permissions: contents: write # To write the generated contents to the readme jobs: update-readme-with-blog: name: Update this repo\u0026#39;s README with latest blog posts runs-on: ubuntu-latest steps: - name: Checkout uses: actions/checkout@v3 - name: Pull in blog\u0026#39;s posts uses: gautamkrishnar/blog-post-workflow@v1 with: feed_list: \u0026#34;https://cai-hong-tu-blog.pages.dev/index.xml\u0026#34; template: \u0026#34;\u0026lt;div\u0026gt;\u0026lt;a href=\\\u0026#34;$url\\\u0026#34;\u0026gt;$title $date\u0026lt;/a\u0026gt;\u0026lt;/div\u0026gt;\u0026#34; date_format: \u0026#34;yyyy-mm-dd\u0026#34; Star 趋势图 在自己开源项目根目录下的README.md文件中，添加如下代码即可：\n其中，自己GitHub用户名需要替换为自己的 Github 用户名，例如下图为rento666. 开源项目仓库名需要替换为自己的开源项目仓库名，下图为My-Blog-By-Hugo-stack。 Star趋势图代码 (点击展开收缩) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 \u0026lt;picture\u0026gt; \u0026lt;source media=\u0026#34;(prefers-color-scheme: dark)\u0026#34; srcset=\u0026#34; https://api.star-history.com/svg?repos=自己GitHub用户名/开源项目仓库名\u0026amp;type=Date\u0026amp;theme=dark \u0026#34; /\u0026gt; \u0026lt;source media=\u0026#34;(prefers-color-scheme: light)\u0026#34; srcset=\u0026#34; https://api.star-history.com/svg?repos=自己GitHub用户名/开源项目仓库名\u0026amp;type=Date \u0026#34; /\u0026gt; \u0026lt;img alt=\u0026#34;Star History Chart\u0026#34; src=\u0026#34;https://api.star-history.com/svg?repos=自己GitHub用户名/开源项目仓库名\u0026amp;type=Date\u0026#34; /\u0026gt; \u0026lt;/picture\u0026gt; 不确定两个名称的，可参考如下图所示寻找：\n图示箭头指向用户名+项目仓库名\r附录 参考 超详细的 GitHub 个人主页美化教程 | peterjxl 博客 Hugo 对 Markdown 支持情况测试 | Github-Pages 部署的博客，作者：edward852 Github 开源项目 Star 趋势图 | Github 版权信息 本文原载于 彩虹兔の博客，遵循 CC BY-NC-SA 4.0 协议，复制请保留原文出处。\n","date":"2024-11-14T22:49:27+08:00","image":"https://picsum.photos/seed/231s2/800/600","permalink":"http://localhost:1313/2024/github-profile/","title":"GitHub 个人主页 README 美化 \u0026 Star 趋势图"},{"content":"引言（2024.11.15 更新） 最近想重新拾起写博客的习惯，但是发现之前的Hexo 博客 | (Github-Pages)有点花里胡哨的，找了半天，发现这个Hugo | (Github)的Stack 主题 | (Github)挺符合我审美的，就决定用 Hugo 来写博客。\n有以下几点需要注意：\n我使用的版本是Hugo-stack 主题-魔改版 | (Github)。 由于这个版本(截至目前为止)已经两年没有更新了(上次更新时间为 2022 年)，所以对于最新版本的 Hugo，执行hugo server可能会报错，需要自己复制出错原因，询问 AI（如 ChatGPT 等）去解决报错。 使用方式（MarkDown 语法） 可收缩代码块 这是标题 (点击展开收缩) 1 2 3 4 5 6 7 // 去掉 % 前面的 \\ {{\\% spoiler %}} 内容 {{\\% /spoiler %}} // 去掉 % 前面的 \\ 使用 i18n 文件中的值 须知：\n我的i18n文件夹在.\\themes\\stack\\i18n目录下。 下面我将拿主页的欢迎语为例，讲述一下如何适配多语言：\n欢迎语\r这个欢迎语的html模板在.\\layouts\\index.html中，位于{{ $pag := .Paginate ($filtered) }}之下。\n这是html模板 (点击展开收缩) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 \u0026lt;!-- 首页欢迎字幅板块 --\u0026gt; \u0026lt;div class=\u0026#34;welcome\u0026#34;\u0026gt; \u0026lt;p style=\u0026#34;font-size: 2rem; text-align: center; font-weight: bold\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;shake\u0026#34;\u0026gt;{{ T \u0026#34;welcome.emoji\u0026#34; }}\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;jump-text1\u0026#34;\u0026gt; {{ T \u0026#34;welcome.msg1\u0026#34; }} \u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;jump-text2\u0026#34;\u0026gt; {{ T \u0026#34;welcome.msg2\u0026#34; }} \u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;jump-text3\u0026#34; style=\u0026#34;color: #e99312\u0026#34;\u0026gt; {{ .Site.Title }} \u0026lt;/span\u0026gt; \u0026lt;!-- \u0026lt;span class=\u0026#34;jump-text3\u0026#34; style=\u0026#34;color:#e99312\u0026#34;\u0026gt;Ca\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026#34;jump-text4\u0026#34; style=\u0026#34;color:#e99312\u0026#34;\u0026gt;i\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;jump-text5\u0026#34; style=\u0026#34;color:#e99312\u0026#34;\u0026gt;Ho\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026#34;jump-text6\u0026#34; style=\u0026#34;color:#e99312\u0026#34;\u0026gt;ng\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;jump-text7\u0026#34; style=\u0026#34;color:#e99312\u0026#34;\u0026gt;Tu\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;jump-text8\u0026#34; style=\u0026#34;color:#e99312\u0026#34;\u0026gt;\u0026#39;s\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;jump-text9\u0026#34; style=\u0026#34;color:#e99312\u0026#34;\u0026gt;Blog\u0026lt;/span\u0026gt; --\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;p style=\u0026#34;font-size: 1.5rem; text-align: center; font-weight: bold\u0026#34;\u0026gt; \u0026lt;span \u0026gt;{{ T \u0026#34;welcome.currentText\u0026#34; }}: \u0026lt;a href=\u0026#34;{{ .Site.BaseURL }}\u0026#34; \u0026gt;{{ .Site.BaseURL | strings.TrimPrefix \u0026#34;http://\u0026#34; | strings.TrimPrefix \u0026#34;https://\u0026#34; | strings.TrimSuffix \u0026#34;/\u0026#34; }}\u0026lt;/a \u0026gt;\u0026lt;/span \u0026gt;\u0026amp;emsp;\u0026amp;emsp; \u0026lt;span \u0026gt;{{ T \u0026#34;welcome.permanentText\u0026#34; }}: \u0026lt;a href=\u0026#34;https://cai-hong-tu-blog.pages.dev\u0026#34; \u0026gt;cai-hong-tu-blog.pages.dev\u0026lt;/a \u0026gt;\u0026lt;/span \u0026gt; \u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;!-- ------首页欢迎字幅板块------ --\u0026gt; {{ T \u0026quot;welcome.emoji\u0026quot; }} 都是我在.\\themes\\stack\\i18n文件夹下的xxx.yaml文件中定义的变量（xxx 代表多语言）. 这是zh-CN.yaml文件中的配置 (点击展开收缩) 1 2 3 4 5 6 7 8 9 10 11 12 13 welcome: emoji: other: 👋 msg1: other: 欢迎 msg2: other: 来到 permanentText: other: 永久博客链接 currentText: other: 当前博客链接 top: other: 回到顶部 {{.Site.BaseURL }} 是我在.\\config\\_default\\hugo.yaml文件中定义的变量。(我使用了多语言配置 config，默认应该是./config.yaml) hugo.yaml前几行的 (点击展开收缩) 1 2 3 4 baseurl: https://caihongtu.top/ languageCode: zh-cn theme: stack title: 彩虹兔の博客 Markdown文档中插入空格 在 Markdown 文档中，可以直接采用 HTML 标记插入空格（blank space），而且无需任何其他前缀或分隔符。具体如下所示：\n插入一个空格 (non-breaking space)\n\u0026amp;nbsp; 或 \u0026amp;#160; 或 \u0026amp;#xA0;\n插入两个空格 (en space)\n\u0026amp;ensp; 或 \u0026amp;#8194; 或 \u0026amp;#x2002;\n插入四个空格 (em space)\n\u0026amp;emsp; 或 \u0026amp;#8195; 或 \u0026amp;#x2003;\n插入细空格 (thin space)\n\u0026amp;thinsp; 或 \u0026amp;#8201; 或 \u0026amp;#x2009;\n注意：不要漏掉分号。\n常识（对我来说需要记在这里） HTML 字符集——空格 空格：\u0026amp;nbsp; 按下space键出来的，宽度受字体影响。 空格：\u0026amp;ensp; 宽度为$\\frac{1}{2}$个中文宽度，不受字体影响。 空格：\u0026amp;emsp; 宽度为 1 个中文宽度，不受字体影响。 点击 a 标签打开新窗口 在 a 标签中添加target=\u0026quot;_blank\u0026quot;属性即可。\n1 \u0026lt;a href=\u0026#34;你的链接\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt;\u0026lt;/a\u0026gt; 未解决问题（随时更新） 以下问题是在hugo v0.138.0的基础上出现的（可能是我不会操作/doge）。 如何查看hugo版本？ (点击展开收缩) 在 cmd 中输入hugo version\n1 输出：hugo v0.138.0-ad82998d54b3f9f8c2741b67356813b55b3134b9+extended+withdeploy windows/amd64 BuildDate=2024-11-06T11:22:34Z VendorInfo=gohugoio categories 的多语言适配 我尝试了在./content/categories目录下的test文件中，使用_index.md和_index.en.md，结果并不是我预想的那样，在首页分类处，只能显示为test或者测试，并没有多语言适配。\n图示右侧栏不适配多语言\r起初目录结构 (点击展开收缩) 1 2 3 4 5 6 7 8 ├─content │ ├─categories │ │ _index.en.md │ │ _index.md │ │ │ └─test │ │ _index.md │ └─ _index.en.md 最终只能将test、测试两个目录分开配置：\n最终目录结构 (点击展开收缩) 1 2 3 4 5 6 7 8 9 10 ├─content │ ├─categories │ │ │ _index.en.md │ │ │ _index.md │ │ │ │ │ ├─test │ │ │ _index.en.md │ │ │ │ │ └─测试 │ │ _index.md 如图所示： 目录结构\r附录 用到的第三方 picsum |随机图片 SM.MS | 图床 参考 Hugo 对 Markdown 支持情况测试 | 博客\nStack 主题的自定义 | 博客\nWindows 安装 Hugo | 文档\n版权信息 本文原载于 彩虹兔の博客，遵循 CC BY-NC-SA 4.0 协议，复制请保留原文出处。\n结尾 ","date":"2024-11-14T15:13:23+08:00","image":"https://picsum.photos/seed/645brg/800/600","permalink":"http://localhost:1313/2024/must-read-content-for-blogging/","title":"写博客之必读内容"}]